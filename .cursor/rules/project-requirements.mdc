---
description: 
globs: 
alwaysApply: true
---
CapitalCanvas – Project Requirements Document
1  Overview
CapitalCanvas is a web-based “sandbox” that lets analysts upload or select a public US ticker, adjust their assumptions in a Notion-style interface, and instantly generate:
| Output | Purpose |
|--------|---------|
| Three-statement model | Understand historical and projected performance |
| Valuation views (DCF, Trading Comps, LBO) | Gauge standalone & transaction value |
| Capital-structure heat-map | Visualise WACC & equity IRR across leverage scenarios |
| Exports (.xlsx, .pptx) | Produce banker-ready deliverables for client pitches |
***2  Objectives & Success Criteria
| Goal | Metric for “Done” |
|------|-------------------|
| Fast insights | Full refresh < 3 min for S&P500-sized company |
| Zero hard-coding | All constants loaded from YAML or .env |
| Banker-grade polish | Outputs match Big-4 formatting standards |
| Persistent storage | Postgres round-trip latency < 100 ms |
***3  Stakeholders
| Role | Interest |
|------|----------|
| Student / Intern analyst | Fast learning tool & showcase project |
| Technical interviewer | Evidence of clean code, tests, architecture |
| IB / PE / VC associate | Realistic banking functionality & exports |
***4  Scope
4.1 In-Scope
SEC filing ingestion (10-K, 10-Q, 8-K)
Market-data pull (IEX Cloud / FMP)
Forecast engine (5-year driver model)
Valuation modules: DCF, Comps, LBO
Debt-capacity & ratings grid
Web UI (React 18 + Mantine) with Notion-style blocks
Postgres persistence & caching
Excel / PowerPoint generation
Automated tests & linting
4.2 Out-of-Scope
Non-US GAAP filings
Currency conversion
Real-time collaborative editing
Mobile-optimised UI (desktop only MVP)
***5  System Architecture
┌───────────────────────────────────────────────────────────────┐
│                          Frontend (React)                    │
│  • Notion-style UI  • TanStack Query  • Recharts / Plotly    │
└──────────────┬───────────────────────────────────────────────┘
               │ REST / WebSocket
┌──────────────▼───────────────────┐
│        FastAPI Backend           │
│  • Business logic                │
│  • Valuation engines             │
│  • Export services               │
└──────────────┬─────────┬─────────┘
               │         │
      ┌────────▼───┐ ┌───▼──────────┐
      │PostgreSQL  │ │ External APIs│
      │(asyncpg)   │ │ SEC, IEX/FMP │
      └────────────┘ └──────────────┘
***6  Technology Stack
| Layer       | Choice                              | Notes |
|-------------|-------------------------------------|-------|
| Backend | Python 3.12, FastAPI, SQLModel      | Async (asyncpg) |
| Database| PostgreSQL 15                       | DATABASE_URL via .env |
| Frontend| React 18 (Vite, TS), Mantine UI     | Custom Notion theme |
| Messaging| WebSockets (Starlette)             | Export progress updates |
| Data & Math| pandas, numpy, scipy             | Financial calcs |
| Exports | openpyxl, python-pptx               | Template-based |
| Testing | pytest, react-testing-library       | 80 %+ coverage |
| Tooling | pre-commit (black, flake8, isort, eslint, prettier) | Code quality |
***7  Functional Requirements
| ID | Requirement |
|----|-------------|
| FR-1 | User can search or enter any valid US ticker. |
| FR-2 | System fetches last 8 fiscal years of IS/BS/CF and prices; caches in Postgres. |
| FR-3 | User can modify forecast drivers (growth, margins, CapEx %, NWC %). |
| FR-4 | System recalculates projections, DCF, Comps, and LBO in < 30 s. |
| FR-5 | Financing Optimiser finds debt/equity mix that meets rating & covenant limits. |
| FR-6 | Heat-map displays WACC & equity IRR across leverage grid. |
| FR-7 | User can export full Excel model and 10-slide PPT deck. |
| FR-8 | Export endpoints stream binary files with WebSocket status updates. |
| FR-9 | All defaults come from YAML; API keys & DB URL from .env. |
| FR-10| Dashboard persists last five analysed tickers per user session. |
***8  Non-Functional Requirements
| Category | Target |
|----------|--------|
| Performance | Server P95 response < 1 s (excluding initial ingest) |
| Scalability | Stateless API (dockerised) ready for horiz. scaling |
| Security | Secrets only via env; no keys logged; CORS locked to frontend |
| Accessibility | WCAG AA colour contrast; keyboard-navigable sliders |
| Maintainability | 90 %+ typed Python & TS code; modular services |
| Usability | “Notion-style” spacing, font sizes 14-16 px, intuitive sliders |
| Reliability | Ingest retry logic; Postgres health checks |
***9  API Design (excerpt)
| Method | Endpoint | Payload / Params | Response |
|--------|----------|------------------|----------|
| GET  | /api/ticker/{symbol}/raw | path symbol | JSON of normalised filings, prices |
| POST | /api/model | body: {symbol, drivers, configs} | Job-ID |
| WS   | /ws/progress/{job_id} | — | % complete, stage |
| GET  | /api/export/{job_id}/excel | — | .xlsx stream |
| GET  | /api/export/{job_id}/ppt | — | .pptx stream |
***10  Data Model (simplified)
| Table | Fields |
|-------|--------|
| companies | id, symbol, name, sector, latest_price |
| raw_filings | id, symbol, year, filing_json, fetched_at |
| models | id, symbol, drivers_json, results_json, created_at |
***11  UI Wireframe Summary
Left Sidebar
Logo + “CapitalCanvas”
Search bar (tickers)
Recent models list
Main Panel
Block 1: Assumption sliders (accordion)
Block 2: Valuation tabs (DCF, Comps, LBO)
Block 3: Heat-map with dropdown (WACC/eIRR)
Block 4: Export & status
Styling cues: white cards (#FFFFFF), grey headings (#6B6F76), radius 8px, shadow 0 1px 3px rgba(0,0,0,0.08), font Inter.
***12  Configuration Files
# default_assumptions.yml
tax_rate: 0.25
terminal_growth: 0.025
risk_free_rate: 0.045
market_premium: 0.055
beta_override: null           # null → use regressed beta
# rating_grid.yml
- rating: BBB
  max_leverage: 3.5
  min_coverage: 3.0
- rating: BB
  max_leverage: 4.5
  min_coverage: 2.5
***13  Environment Variables (.env.example)
SEC_API_KEY=your_key_here
FMP_KEY=your_key_here
DATABASE_URL=postgres://user:pass@db:5432/capitalcanvas
***14  Testing Strategy
Unit tests – 100 % key math functions, 80 % overall.
Integration tests – mock SEC API, run valuation pipeline end-to-end.
Frontend tests – component rendering, slider→API calls, snapshot tests.
Performance tests – pytest-benchmark for DCF run, k6 for API latency.
***15  Project Timeline (reference)
| Week | Deliverable |
|------|-------------|
| 1    | Data ingestion + Postgres schema |
| 2    | Forecast & valuation engines |
| 3    | Financing optimiser + heat-map |
| 4    | React MVP with Notion theme |
| 5    | Exports + WebSocket progress |
| 6    | Tests, README, demo video |
***16  Acceptance Criteria
User inputs any NYSE/Nasdaq ticker and obtains complete outputs in a single session.  
No constant (tax, growth, pricing) is found hard-coded in repository search.  
.xlsx opens error-free in Excel 365; .pptx follows 10-slide template.  
Postgres contains cached filings after first run; repeat call hits database.  
Lighthouse performance ≥ 80 desktop.
***17  Open Issues / Future Enhancements
Multi-currency support for ADRs.
OAuth login to save private scenarios.
Collaboration mode via CRDT back-end.
Plug-in architecture for additional valuation methods (e.g., SPAC, SOTP).
***Prepared: 11 May 2025  Author: Product & Engineering Team – CapitalCanvas